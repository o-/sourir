program: BRANCH NIL IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 121.
##
## instruction -> BRANCH expression label . label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## BRANCH expression label 
##

Parsing an instruction, we parsed "branch <expr> <label>" so far;
a label, for example "foo", is now expected to construct a branch
instruction
"branch <expr> <label> <label>".

program: BRANCH NIL TRIPLE_DOT 
##
## Ends in an error in state: 120.
##
## instruction -> BRANCH expression . label label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## BRANCH expression 
##

Parsing an instruction, we parsed "branch <expr>" so far; a label, for
example "foo", is now expected to construct a branch instruction
"branch <expr> <label> <label>".

program: BRANCH TRIPLE_DOT 
##
## Ends in an error in state: 119.
##
## instruction -> BRANCH . expression label label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## BRANCH 
##

Parsing an instruction, we parsed "branch" so far; an expression, for
example "(x == 2)", is now expected to construct a branch instruction
"branch <expr> <label> <label>".

program: GOTO TRIPLE_DOT 
##
## Ends in an error in state: 94.
##
## instruction -> GOTO . label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GOTO 
##

Parsing an instruction, we parsed "goto" so far; a label, for example
"foo", is now expected to construct a goto instruction
"goto <label>".

program: IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 93.
##
## label -> IDENTIFIER . [ COLON ]
## variable -> IDENTIFIER . [ LEFTARROW ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER 
##

Parsing an instruction, we parsed an identifier so far (variable or label). 
- if this is a label declaration, we expect a semicolon: "<label>:"
- if this is an assignment, we expect a left arrow: "<var> <- <expression>"

program: OSR LBRACKET NIL RBRACKET LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN LBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 69.
##
## instruction -> OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN label COMMA label COMMA label RPAREN LBRACKET . loption(separated_nonempty_list(COMMA,osr_def)) RBRACKET [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN label COMMA label COMMA label RPAREN LBRACKET 
##

There was an error parsing the specification of the new environment of an
osr instruction. The specification is a comma-separated list of terms of the form
"const x = e" (where "e" is an expression), "mut x = e", "mut x = &y"
or just "mut x". For example,
"osr [(a==1)] (Main,optimized,l2) [const x = e, mut y = &y, mut z]".

program: OSR LBRACKET NIL RBRACKET LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN TRIPLE_DOT 
##
## Ends in an error in state: 68.
##
## instruction -> OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN label COMMA label COMMA label RPAREN . LBRACKET loption(separated_nonempty_list(COMMA,osr_def)) RBRACKET [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN label COMMA label COMMA label RPAREN 
##

After "osr [...] (...) " we expect the specification of the new environment.
It is a square bracket enclosed, comma-separated list
of terms of the form "const x = e" (where "e" is an expression),
"mut x = e", "mut x = &y" or just "mut x". For example,
"osr [(a==1)] (Main,optimized,l2) [const x = e, mut y = &y, mut z]".


program: OSR LBRACKET NIL RBRACKET LPAREN TRIPLE_DOT 
##
## Ends in an error in state: 61.
##
## instruction -> OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN . label COMMA label COMMA label RPAREN LBRACKET loption(separated_nonempty_list(COMMA,osr_def)) RBRACKET [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN 
##

Parsing an osr instruction, there is an error with the syntax of the target
location "(function, version, label)".
The complete instruction syntax is "osr [<conditions>] (<target>) [<osr-map>]",
For example,
"osr [(a==1)] (Main,optimized,l2) [const x = e, mut y = &y, mut z]".

program: OSR LBRACKET NIL RBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 60.
##
## instruction -> OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET . LPAREN label COMMA label COMMA label RPAREN LBRACKET loption(separated_nonempty_list(COMMA,osr_def)) RBRACKET [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## OSR LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET 
##

Parsing an osr instruction, we parsed "osr [<expr> ...]", and are
now expecting a target location "(function, version, label)".
The complete instruction syntax is "osr [<conditions>] (<target>) [<osr-map>]",
For example,
"osr [(a==1)] (Main,optimized,l2) [const x = e, mut y = &y, mut z]".

program: OSR LBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 57.
##
## instruction -> OSR LBRACKET . loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN label COMMA label COMMA label RPAREN LBRACKET loption(separated_nonempty_list(COMMA,osr_def)) RBRACKET [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## OSR LBRACKET 
##

Parsing an osr instruction, there was an error parsing the list of conditions.
Conditions are expressions like "(x == 2)".
The complete instruction syntax is "osr [<conditions>] (<target>) [<osr-map>]",
For example,
"osr [(a==1)] (Main,optimized,l2) [const x = e, mut y = &y, mut z]".


program: OSR TRIPLE_DOT 
##
## Ends in an error in state: 56.
##
## instruction -> OSR . LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET LPAREN label COMMA label COMMA label RPAREN LBRACKET loption(separated_nonempty_list(COMMA,osr_def)) RBRACKET [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## OSR 
##

Parsing an osr instruction, we parsed "osr", and are now expecting a bracket
enclosed list of conditions. Conditions are expressions like "(x == 2)".
The complete instruction syntax is "osr [<conditions>] (<target>) [<osr-map>]",
For example,
"osr [(a==1)] (Main,optimized,l2) [const x = e, mut y = &y, mut z]".

program: LBRACE IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 8.
##
## scope -> variable . COMMA scope [ RBRACE ]
## scope -> variable . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## variable 
##

Parsing a scope annotation, we expect a comma-separated list of
variables between curly brackets, for example "{ x, y }", the last
element possibly being "...", for example "{ x, y, ...}". ("..." means
that we are not restricting the instruction to use only the variables
listed, we are only asking that at least those variables be present in
scope.)

program: LBRACE TRIPLE_DOT RBRACE BOOL 
##
## Ends in an error in state: 12.
##
## scope_annotation -> LBRACE scope RBRACE . optional_newlines [ STOP RETURN READ PRINT OSR MUT IDENTIFIER GOTO DROP CONST COMMENT CLEAR CALL BRANCH ]
##
## The known suffix of the stack is as follows:
## LBRACE scope RBRACE 
##

We parsed a scope annotation, and we now expect an instruction
followed by a line break.

program: LBRACE TRIPLE_DOT TRIPLE_DOT 
##
## Ends in an error in state: 11.
##
## scope_annotation -> LBRACE scope . RBRACE optional_newlines [ STOP RETURN READ PRINT OSR MUT IDENTIFIER GOTO DROP CONST COMMENT CLEAR CALL BRANCH ]
##
## The known suffix of the stack is as follows:
## LBRACE scope 
##

In a scope annotation, "..." should be the last item. "{ x, ... }" or
"{ ... }" are valid, but "{ ..., x }" is not.

program: PRINT LPAREN IDENTIFIER PLUS IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 45.
##
## expression -> LPAREN simple_expression infixop simple_expression . RPAREN [ RPAREN RBRACKET NEWLINE LPAREN IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN simple_expression infixop simple_expression 
##

Parsing an expression, we parsed "( <arg> <op> <arg>" so far;
a closing parenthesis ")" is now expected.

program: PRINT LPAREN IDENTIFIER PLUS TRIPLE_DOT 
##
## Ends in an error in state: 44.
##
## expression -> LPAREN simple_expression infixop . simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN simple_expression infixop 
##

Parsing an expression, we parsed "( <arg> <op>" so far; an argument
(variable or literal value) is now expected to construct an expression
"( <arg> <op> <arg> )".

program: PRINT LPAREN IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 40.
##
## expression -> LPAREN simple_expression . infixop simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN simple_expression 
##

Parsing an expression, we parsed "( <arg>" so far; an operator such as
"+", "==" or "!=" is now expected to construct an expression
"( <var> <op> <var> )".

program: PRINT LPAREN TRIPLE_DOT 
##
## Ends in an error in state: 36.
##
## expression -> LPAREN . simple_expression infixop simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN IDENTIFIER COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

Parsing an expression, we parsed "(" so far; an argument (variable or
literal value) is now expected to construct an expression
"( <arg> <op> <arg> )".

program: PRINT TRIPLE_DOT 
##
## Ends in an error in state: 54.
##
## instruction -> PRINT . expression [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## PRINT 
##

Parsing an instruction, we parsed "print" so far;
an expression, for example "(x + 1)", is now expected
to construct a print instruction
"print <expr>".

program: TRIPLE_DOT 
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
## 
##

We parsed a correct program so far; extra instructions, or the end of
the file, are now expected.

